Index: src/main/java/ru/netology/controller/PostController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.netology.controller;\n\nimport com.google.gson.Gson;\nimport ru.netology.model.Post;\nimport ru.netology.service.PostService;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.Reader;\n\nimport static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n\n//прием запросов и подготовка ответов\npublic class PostController {\n    public static final String APPLICATION_JSON = \"application/json\";\n    private final PostService service;//переменная для записи данных сервиса\n\n    public PostController(PostService service) {\n        this.service = service;\n    }\n\n    public void all(HttpServletResponse response) throws IOException {\n        response.setContentType(APPLICATION_JSON);//в ответе устанавливаем тип файла (заголовок)\n        final var data = service.all();//получаем все даннеы из репозитория обработанные сервисом\n        final var gson = new Gson();//создаем обьект\n        response.getWriter().print(gson.toJson(data));\n        //записываем данные в json и записываем в тело запроса файл\n    }\n\n    public void getById(long id, HttpServletResponse response) throws IOException {\n        // TODO: deserialize request & serialize response\n        response.setContentType(APPLICATION_JSON);\n        final var data = service.getById(id);\n        final var gson = new Gson();\n        response.getWriter().print(gson.toJson(data));\n    }\n\n    //готовим ответ на запрос сохранить пост\n    public void save(Reader body, HttpServletResponse response) throws IOException {\n        response.setContentType(APPLICATION_JSON);\n        final var gson = new Gson();\n        final var post = gson.fromJson(body, Post.class);//конвертируем файл в обьект\n        final var data = service.save(post);//передаем обьект пост в сервисб результат записываем в переменную\n        response.getWriter().print(gson.toJson(data));//записываем значение переменной и файл в ответ\n    }\n\n    public void removeById(long id, HttpServletResponse response) {\n        // TODO: deserialize request & serialize response\n        service.removeById(id);\n        response.setStatus(SC_NO_CONTENT);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/netology/controller/PostController.java b/src/main/java/ru/netology/controller/PostController.java
--- a/src/main/java/ru/netology/controller/PostController.java	(revision 25e2c6ca9ce3b207b6bb34c63fd90be71ff6daf3)
+++ b/src/main/java/ru/netology/controller/PostController.java	(date 1700320330962)
@@ -1,6 +1,9 @@
 package ru.netology.controller;
 
 import com.google.gson.Gson;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Component;
+import org.springframework.stereotype.Controller;
 import ru.netology.model.Post;
 import ru.netology.service.PostService;
 
@@ -8,23 +11,20 @@
 import java.io.IOException;
 import java.io.Reader;
 
-import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;
-
-//прием запросов и подготовка ответов
 public class PostController {
     public static final String APPLICATION_JSON = "application/json";
-    private final PostService service;//переменная для записи данных сервиса
+
+    private final PostService service;
 
     public PostController(PostService service) {
         this.service = service;
     }
 
     public void all(HttpServletResponse response) throws IOException {
-        response.setContentType(APPLICATION_JSON);//в ответе устанавливаем тип файла (заголовок)
-        final var data = service.all();//получаем все даннеы из репозитория обработанные сервисом
-        final var gson = new Gson();//создаем обьект
+        response.setContentType(APPLICATION_JSON);
+        final var data = service.all();
+        final var gson = new Gson();
         response.getWriter().print(gson.toJson(data));
-        //записываем данные в json и записываем в тело запроса файл
     }
 
     public void getById(long id, HttpServletResponse response) throws IOException {
@@ -35,18 +35,17 @@
         response.getWriter().print(gson.toJson(data));
     }
 
-    //готовим ответ на запрос сохранить пост
     public void save(Reader body, HttpServletResponse response) throws IOException {
         response.setContentType(APPLICATION_JSON);
         final var gson = new Gson();
-        final var post = gson.fromJson(body, Post.class);//конвертируем файл в обьект
-        final var data = service.save(post);//передаем обьект пост в сервисб результат записываем в переменную
-        response.getWriter().print(gson.toJson(data));//записываем значение переменной и файл в ответ
+        final var post = gson.fromJson(body, Post.class);
+        final var data = service.save(post);
+        response.getWriter().print(gson.toJson(data));
     }
 
     public void removeById(long id, HttpServletResponse response) {
         // TODO: deserialize request & serialize response
         service.removeById(id);
-        response.setStatus(SC_NO_CONTENT);
+        response.setStatus(HttpServletResponse.SC_NO_CONTENT);
     }
 }
Index: src/main/java/ru/netology/repository/PostRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.netology.repository;\n\nimport ru.netology.model.Post;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Optional;\n\n// Stub\npublic class PostRepository {\n    private Long idPost;\n\n    private HashMap<Long, Post> basePost = new HashMap<>();\n\n    public List<Post> all() {\n        return basePost.values().stream().toList();\n    }\n\n    public Optional<Post> getById(long id) {\n        return Optional.ofNullable(basePost.get(id));\n    }\n\n    public synchronized Post save(Post post) {\n        if (post.getId() == 0) {\n            idPost++;\n            post.setId(idPost);\n            basePost.put(idPost, post);\n        }\n        basePost.put(post.getId(), post);\n        return post;\n    }\n\n    public void removeById(long id) {\n        basePost.remove(id);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/netology/repository/PostRepository.java b/src/main/java/ru/netology/repository/PostRepository.java
--- a/src/main/java/ru/netology/repository/PostRepository.java	(revision 25e2c6ca9ce3b207b6bb34c63fd90be71ff6daf3)
+++ b/src/main/java/ru/netology/repository/PostRepository.java	(date 1700323399949)
@@ -1,5 +1,6 @@
 package ru.netology.repository;
 
+import org.springframework.stereotype.Repository;
 import ru.netology.model.Post;
 
 import java.util.Collections;
@@ -7,9 +8,8 @@
 import java.util.List;
 import java.util.Optional;
 
-// Stub
 public class PostRepository {
-    private Long idPost;
+    private Long idPost = 0L;
 
     private HashMap<Long, Post> basePost = new HashMap<>();
 
@@ -23,7 +23,7 @@
 
     public synchronized Post save(Post post) {
         if (post.getId() == 0) {
-            idPost++;
+            ++idPost;
             post.setId(idPost);
             basePost.put(idPost, post);
         }
Index: src/main/java/ru/netology/servlet/MainServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.netology.servlet;\n\nimport ru.netology.controller.PostController;\nimport ru.netology.repository.PostRepository;\nimport ru.netology.service.PostService;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class MainServlet extends HttpServlet {\n    private PostController controller;\n    private static final String GET = \"GET\";\n    private static final String POST = \"POST\";\n    private static final String DELETE = \"DELETE\";\n\n    private static final String validPath = \"/api/posts/\";\n\n\n    @Override\n    public void init() {\n        final var repository = new PostRepository();\n        //создаем хранилище\n        final var service = new PostService(repository);\n        //создаем сервис (бизнес логика) и записываем данные из хранилища\n        controller = new PostController(service);\n        //в контроллер передаем информацию для отправки пользователю обработанную сервисом\n    }\n\n    @Override\n    protected void service(HttpServletRequest req, HttpServletResponse resp) {\n        // если деплоились в root context, то достаточно этого\n        try {\n            final var path = req.getRequestURI();\n            final var method = req.getMethod();\n            // primitive routing\n            if (method.equals(GET) && path.equals(\"/api/posts\")) {\n                controller.all(resp);\n                return;\n            }\n            if (method.equals(GET) && path.matches(validPath + \"\\\\d+\")) {\n                // easy way\n                final var id = parserId(path);\n                controller.getById(id, resp);\n                return;\n            }\n            if (method.equals(POST) && path.equals(\"/api/posts\")) {\n                controller.save(req.getReader(), resp);\n                return;\n            }\n            if (method.equals(DELETE) && path.matches(validPath + \"\\\\d+\")) {\n                // easy way\n                final var id = parserId(path);\n                controller.removeById(id, resp);\n                return;\n            }\n            resp.setStatus(HttpServletResponse.SC_NOT_FOUND);\n        } catch (Exception e) {\n            e.printStackTrace();\n            resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n        }\n    }\n\n    protected Long parserId(String path) {\n        return Long.parseLong(path.substring(path.lastIndexOf(\"/\")));\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/netology/servlet/MainServlet.java b/src/main/java/ru/netology/servlet/MainServlet.java
--- a/src/main/java/ru/netology/servlet/MainServlet.java	(revision 25e2c6ca9ce3b207b6bb34c63fd90be71ff6daf3)
+++ b/src/main/java/ru/netology/servlet/MainServlet.java	(date 1700320744738)
@@ -1,5 +1,10 @@
 package ru.netology.servlet;
 
+import org.springframework.beans.factory.BeanFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+import org.springframework.scheduling.annotation.Async;
+import ru.netology.config.JavaConfig;
 import ru.netology.controller.PostController;
 import ru.netology.repository.PostRepository;
 import ru.netology.service.PostService;
@@ -10,21 +15,16 @@
 
 public class MainServlet extends HttpServlet {
     private PostController controller;
-    private static final String GET = "GET";
+
     private static final String POST = "POST";
+    private static final String GET = "GET";
     private static final String DELETE = "DELETE";
 
-    private static final String validPath = "/api/posts/";
-
 
     @Override
     public void init() {
-        final var repository = new PostRepository();
-        //создаем хранилище
-        final var service = new PostService(repository);
-        //создаем сервис (бизнес логика) и записываем данные из хранилища
-        controller = new PostController(service);
-        //в контроллер передаем информацию для отправки пользователю обработанную сервисом
+        final  var context = new AnnotationConfigApplicationContext(JavaConfig.class);
+        controller = context.getBean(PostController.class);
     }
 
     @Override
@@ -38,9 +38,9 @@
                 controller.all(resp);
                 return;
             }
-            if (method.equals(GET) && path.matches(validPath + "\\d+")) {
+            if (method.equals(GET) && path.matches("/api/posts/\\d+")) {
                 // easy way
-                final var id = parserId(path);
+                final var id = Long.parseLong(path.substring(path.lastIndexOf("/") + 1));
                 controller.getById(id, resp);
                 return;
             }
@@ -48,9 +48,9 @@
                 controller.save(req.getReader(), resp);
                 return;
             }
-            if (method.equals(DELETE) && path.matches(validPath + "\\d+")) {
+            if (method.equals(DELETE) && path.matches("/api/posts/\\d+")) {
                 // easy way
-                final var id = parserId(path);
+                final var id = Long.parseLong(path.substring(path.lastIndexOf("/") + 1));
                 controller.removeById(id, resp);
                 return;
             }
@@ -60,9 +60,7 @@
             resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
         }
     }
-
-    protected Long parserId(String path) {
-        return Long.parseLong(path.substring(path.lastIndexOf("/")));
-    }
 }
 
+
+
Index: src/main/java/ru/netology/service/PostService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.netology.service;\n\nimport ru.netology.exception.NotFoundException;\nimport ru.netology.model.Post;\nimport ru.netology.repository.PostRepository;\n\nimport java.util.List;\n\npublic class PostService {\n    private final PostRepository repository;\n\n    public PostService(PostRepository repository) {\n        this.repository = repository;\n    }\n\n    public List<Post> all() {\n        return repository.all();\n    }\n\n    public Post getById(long id) {\n        return repository.getById(id).orElseThrow(NotFoundException::new);\n    }\n\n    public Post save(Post post) {\n        return repository.save(post);\n    }\n\n    public void removeById(long id) {\n        repository.removeById(id);\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/netology/service/PostService.java b/src/main/java/ru/netology/service/PostService.java
--- a/src/main/java/ru/netology/service/PostService.java	(revision 25e2c6ca9ce3b207b6bb34c63fd90be71ff6daf3)
+++ b/src/main/java/ru/netology/service/PostService.java	(date 1700320330972)
@@ -1,11 +1,11 @@
 package ru.netology.service;
 
+import org.springframework.stereotype.Service;
 import ru.netology.exception.NotFoundException;
 import ru.netology.model.Post;
 import ru.netology.repository.PostRepository;
 
 import java.util.List;
-
 public class PostService {
     private final PostRepository repository;
 
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>ru.netology</groupId>\n    <artifactId>servlets</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <properties>\n        <maven.compiler.source>11</maven.compiler.source>\n        <maven.compiler.target>11</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n\n    <dependencies>\n            <dependency>\n                <groupId>javax.servlet</groupId>\n                <artifactId>javax.servlet-api</artifactId>\n                <version>4.0.1</version>\n            </dependency>\n        <dependency>\n            <groupId>com.google.code.gson</groupId>\n            <artifactId>gson</artifactId>\n            <version>2.10.1</version>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>16</source>\n                    <target>16</target>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 25e2c6ca9ce3b207b6bb34c63fd90be71ff6daf3)
+++ b/pom.xml	(date 1700321156769)
@@ -7,6 +7,18 @@
     <groupId>ru.netology</groupId>
     <artifactId>servlets</artifactId>
     <version>1.0-SNAPSHOT</version>
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <configuration>
+                    <source>16</source>
+                    <target>16</target>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
     <packaging>war</packaging>
 
     <properties>
@@ -16,28 +28,22 @@
     </properties>
 
     <dependencies>
-            <dependency>
-                <groupId>javax.servlet</groupId>
-                <artifactId>javax.servlet-api</artifactId>
-                <version>4.0.1</version>
-            </dependency>
+        <dependency>
+            <groupId>javax.servlet</groupId>
+            <artifactId>javax.servlet-api</artifactId>
+            <version>4.0.1</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-context</artifactId>
+            <version>5.2.9.RELEASE</version>
+        </dependency>
         <dependency>
             <groupId>com.google.code.gson</groupId>
             <artifactId>gson</artifactId>
-            <version>2.10.1</version>
+            <version>2.8.9</version>
         </dependency>
     </dependencies>
-    <build>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <configuration>
-                    <source>16</source>
-                    <target>16</target>
-                </configuration>
-            </plugin>
-        </plugins>
-    </build>
 
 </project>
\ No newline at end of file
